---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns-local-dns
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  Corefile: |
    .:1053 {
        cache {
          success 9984 30
          denial 9984 5
        }
        errors
        reload
        loop
        forward . {{.Cluster.Kubernetes.DNS.IP}} {
                force_tcp
        }
        prometheus: 9153
        health
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: coredns-local-dns
  namespace: kube-system
  labels:
    k8s-app: coredns-local-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%
  selector:
    matchLabels:
      k8s-app: coredns-local-dns
  template:
    metadata:
       labels:
          k8s-app: coredns-local-dns
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: coredns-local-dns
      hostNetwork: true
      dnsPolicy: Default  # Don't use cluster DNS.
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      containers:
      - name: coredns-local-dns
        image: "k8s.gcr.io/k8s-dns-node-cache:1.15.3"
        resources:
          limits:
            memory: 30Mi
          requests:
            cpu: 25m
            memory: 5Mi
        args: [ "-localip", "169.254.20.10", "-conf", "/etc/coredns/Corefile","-dns.port", "1053"  ]
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            - NET_ADMIN
            - NET_RAW
            drop:
            - all
          readOnlyRootFilesystem: true
        ports:
        - containerPort: 1053
          name: coredns-loc-udp
          protocol: UDP
        - containerPort: 1053
          name: coredns-loc-tcp
          protocol: TCP
        livenessProbe:
          httpGet:
            host: localhost
            path: /health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /run/xtables.lock
          name: xtables-lock
          readOnly: false
        - name: config-volume
          mountPath: /etc/coredns
      volumes:
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      - name: config-volume
        configMap:
          name: coredns-local-dns
          items:
            - key: Corefile
              path: Corefile
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns-local-dns
  namespace: kube-system
  labels:
    kubernetes.io/name: "coredns-local-dns"
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: coredns-local-dns
  labels:
    k8s-app: coredns-local-dns
spec:
  hostIPC: true
  hostPID: true
  allowedCapabilities:
  - NET_BIND_SERVICE
  - NET_ADMIN
  - NET_RAW
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  hostPorts:
  - min: 0
    max: 65535
  volumes:
  - '*'
  allowedHostPaths:
  - pathPrefix: "/run/xtables.lock"
    readOnly: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coredns-local-dns
  labels:
    app: coredns
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - coredns-local-dns
  verbs:
  - use
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: coredns-local-dns
  labels:
    app: coredns-local-dns
subjects:
- kind: ServiceAccount
  name: coredns-local-dns
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: coredns-local-dns
  apiGroup: rbac.authorization.k8s.io
